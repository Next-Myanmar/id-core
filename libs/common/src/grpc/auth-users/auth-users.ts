// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.27.3
// source: protos/auth-users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth.users";

export enum TokenType {
  Normal = 0,
  ActivateUser = 1,
  VerifyLogin = 2,
  UNRECOGNIZED = -1,
}

export interface Empty {
}

export interface GenerateTokenPairRequest {
  userId: string;
  deviceId: string;
  userAgentSource: string;
  tokenType: TokenType;
  accessTokenLifetime: number;
  refreshTokenLifetime?: number | undefined;
}

export interface TokenPairResponse {
  accessToken: string;
  expiresAt: string;
  tokenType: TokenType;
  refreshToken?: string | undefined;
}

export interface AuthenticateRequest {
  authorization: string;
  userAgentSource: string;
}

export interface AuthUser {
  userId: string;
  deviceId: string;
  tokenType: TokenType;
}

export interface GeneratedToken {
  userId: string;
  deviceId: string;
  tokenType: TokenType;
}

export interface GeneratedTokens {
  generatedTokens: GeneratedToken[];
}

export const AUTH_USERS_PACKAGE_NAME = "auth.users";

export interface AuthUsersServiceClient {
  generateTokenPair(request: GenerateTokenPairRequest): Observable<TokenPairResponse>;

  authenticate(request: AuthenticateRequest): Observable<AuthUser>;

  checkAvailableTokens(request: GeneratedTokens): Observable<GeneratedTokens>;

  makeLogout(request: GeneratedTokens): Observable<Empty>;
}

export interface AuthUsersServiceController {
  generateTokenPair(
    request: GenerateTokenPairRequest,
  ): Promise<TokenPairResponse> | Observable<TokenPairResponse> | TokenPairResponse;

  authenticate(request: AuthenticateRequest): Promise<AuthUser> | Observable<AuthUser> | AuthUser;

  checkAvailableTokens(
    request: GeneratedTokens,
  ): Promise<GeneratedTokens> | Observable<GeneratedTokens> | GeneratedTokens;

  makeLogout(request: GeneratedTokens): Promise<Empty> | Observable<Empty> | Empty;
}

export function AuthUsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["generateTokenPair", "authenticate", "checkAvailableTokens", "makeLogout"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthUsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthUsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_USERS_SERVICE_NAME = "AuthUsersService";
