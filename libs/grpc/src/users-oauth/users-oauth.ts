// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.27.3
// source: protos/users-oauth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'users.oauth';

export enum Scope {
  ReadEmail = 0,
  ReadName = 1,
  UNRECOGNIZED = -1,
}

export interface DataRequest {
  userId: string;
  scopes: Scope[];
}

export interface DataResponse {
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
}

export const USERS_OAUTH_PACKAGE_NAME = 'users.oauth';

export interface UsersOauthServiceClient {
  getData(request: DataRequest): Observable<DataResponse>;
}

export interface UsersOauthServiceController {
  getData(
    request: DataRequest,
  ): Promise<DataResponse> | Observable<DataResponse> | DataResponse;
}

export function UsersOauthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['getData'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UsersOauthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UsersOauthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USERS_OAUTH_SERVICE_NAME = 'UsersOauthService';
