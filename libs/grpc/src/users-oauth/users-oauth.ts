// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.27.3
// source: protos/users-oauth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users.oauth";

export enum Scope {
  ReadEmail = 0,
  ReadName = 1,
  UNRECOGNIZED = -1,
}

export interface ProfileRequest {
  userId: string;
  scopes: Scope[];
}

export interface Profile {
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
}

export const USERS_OAUTH_PACKAGE_NAME = "users.oauth";

export interface UsersOauthServiceClient {
  getProfile(request: ProfileRequest): Observable<Profile>;
}

export interface UsersOauthServiceController {
  getProfile(request: ProfileRequest): Promise<Profile> | Observable<Profile> | Profile;
}

export function UsersOauthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getProfile"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersOauthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersOauthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_OAUTH_SERVICE_NAME = "UsersOauthService";
